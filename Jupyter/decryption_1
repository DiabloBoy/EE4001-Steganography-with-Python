def decryption_1(stego,key_matrix,x,y):
    
    new_value = stego.getpixel((x,y))
    
   
    
  
    RED =  list(bin(new_value[0]))
    GREEN = list(bin(new_value[1]))
    BLUE = list(bin(new_value[2]))
    
    RED_1 = RED[2:]
    GREEN_1 = GREEN[2:]
    BLUE_1 = BLUE[2:]
    
    new_red = []
    new_green = []
    new_blue = []
    
    for i in RED_1:
        new_red.append(int(i))
    for i in GREEN_1:
        new_green.append(int(i))
    
            
    r_temp = BLUE_1[-2:]
    
    
    number_of_rotations = str_convert(r_temp)
    
        
    eight_bit_red  = list_appender(new_red)
    eight_bit_green = list_appender(new_green)
    
    red_nibble = eight_bit_red[4:]
    green_nibble = eight_bit_green[4:]
    
    new_list = red_nibble + green_nibble
    
    new_list.insert(0,0)
    
    matrix = [] 
    
    while new_list != []: 
        matrix.append(new_list[:3])
        new_list = new_list[3:]
        
    #XOR first   
    my_matrix = xor_matrix_decrypt(matrix,key_matrix)
    
    #rotate 1 time anticlockwise initially
    final = rotate_90_degree_anticlockwise(my_matrix)
    
    if(number_of_rotations == 0):
        final = rotate_90_degree_anticlockwise(my_matrix)
        #print("number_of_rotations == 0")
            
    if(number_of_rotations == 1 ):
        temp = rotate_90_degree_anticlockwise(my_matrix)
        final = rotate_90_degree_anticlockwise(temp)
        #print("number_of_rotations == 1")
        
    if(number_of_rotations == 2 ):
        temp = rotate_90_degree_anticlockwise(my_matrix)
        temp2 = rotate_90_degree_anticlockwise(temp)
        final = rotate_90_degree_anticlockwise(temp2)
        #print("number_of_rotations == 2")
        
    
    decoded_array = []
    
    for i in range(1,3):
        decoded_array.append(final[0][i])
        
    for i in range(0,3):
        decoded_array.append(final[1][i])
        
    for i in range(0,3):
        decoded_array.append(final[2][i])
        
    string_array = []
    
    for i in decoded_array:
        string_array.append(str(i))
        
    binary_string = "".join(string_array)
    letter = int(binary_string,2)
    
    return chr(letter)
    

def encryption_1(im,char_n,x,y,rotation):
    value  = im.getpixel((x,y))
    
    
    RED =  list(bin(value[0]))
    GREEN = list(bin(value[1]))
    BLUE = list(bin(value[2])) # rotation is encoded here
    
    R = list(bin(rotation))
    
    # Removes "0b"
    R_NEW = R[2:]
    
    #convert rotation number to integer string
    for i in range(0, len(R_NEW)): 
        R_NEW[i] = int(R_NEW[i])
    
    # Creates s 2-bit integer string
    i = 0
    while len(R_NEW) < 2:
        R_NEW.insert(i,0)
        i = i + 1
        
   
    #removes "Ob"
    RED_1 = RED[2:]
    GREEN_1 = GREEN[2:]
    BLUE_1 = BLUE[2:]
    
    new_red = []
    new_green = []
    new_blue = []
    
    for i in RED_1:
        new_red.append(int(i))
    for i in GREEN_1:
        new_green.append(int(i))
    for i in BLUE_1:
         new_blue.append(int(i))
        
        
    eight_bit_red  = list_appender(new_red)
    eight_bit_green = list_appender(new_green)
    eight_bit_blue = list_appender(new_blue)
    
    red_unchanged = eight_bit_red[:4]
    green_unchanged = eight_bit_green[:4]
    blue_unchanged = eight_bit_blue[:-2]
   

    RED_NEW = red_unchanged + char_n[:4]
    GREEN_NEW = green_unchanged + char_n[4:]
    BLUE_NEW = blue_unchanged + R_NEW
    
    
    #convert string to integer
    PUT_RED = str_convert(RED_NEW)
    PUT_GREEN = str_convert(GREEN_NEW)
    PUT_BLUE = str_convert(BLUE_NEW)
    
    #print(PUT_BLUE)
    
    im.putpixel((x,y),(PUT_RED,PUT_GREEN,PUT_BLUE))
    
    return im
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    